ссылочные переменные - разные типы данных для системы но для нас это чисто как псведоним
int& align = var;
существует способ передать в переменную неопределенное количество переменных через ... только этого мы еще не  знаем
параметры со значениями по умолчанию : double power(double num, int power = 2){ ... }
теперь если не передать 2 значение то оно на автомате будет равно 2 в функции, а если передать - будет такое, как передашь
если пропустить из 3 аргументов 2й, то буде небяспека, выдаст ошибку и вроде как нельзя даже пропустить (прдтверждено)
только другой тип данных или модиикатор const - не перегрузка
перегрузка - разное количество входных данных и/или их тип данных
если в одной функции будет int а в другой &int и в остальном функции будут одинаковы по параметрам - буде небяспека
если будет ссылочный тип & и будет перегрузка тип &int и const &int то все ок
есть такая штука как константная ссылка
когда создается ссылочная переменная мы можем ей присвоить только лишь значение на неконстантную штуку
константная ссылка на такие извращения пойдет
вывод: для констант нудо юзать константные ссылки иначе буде херня
и потом к константным ссылкмам нельзя обращаться чтоб поменять значение
если вычислять выражение через обычные операторы в например сиауте то значене потом пропадет и нельзя его юзать, система стирает
если присвоить это значение константной ссылке то его можно потом юзать только нельзя потом переопределить
рекомендуется создавать константные ссылки везде де только возможно
если хочется сделать по-простому много возвращаемых значений - юзай передачу в функции по ссылке
консты объявляются шобы себя обезопасить
если функция принимает значения по ссылке то можно передавать только неконстантные выражения
поэтому супер-вариант при юзании функций - прописывать аля const &int x;
l-выражение - простая переменная-работяга
r-выражение - константа еб@ть

-------------------

Базар за шаблоны

template <typename T, typename S>
параметром можно выступать не только переменная а еще и тип данных в принимаемых параметрах который можно передать по шаблону вот как выше написано
шаблоном можно считать семейством функций
нужен чтоб описать алгоритм для всех типой данных конкретной функции

юзаются когда невыгодно из-за увеличения буков юзат ьперегрузку
template<typename T>
void swap(T& a, T& b){

}

вызов такой функции - 

double a = 2.5;
double b = 3.5;

swap <double>(a,b);

класс может быть тоде типом данных в шаблон и буде збс

если не забрасывать при объеялении чего-нибудь тип в шаблоне то попробует само определить че за тип через принимаемые параметры

---------------------------
функции inline

это означает что функция будет встроенной - вместо вызова функции она внедрится с телом функции (хоть и компиляторы стали умные и в них отлично сделана оптимизация) 
Inline это рекомандательная штука и не факт что функция выполнится как встроенная
можно кароч даже инилайном этим не заморачиваться

-----------------------

дальше идет рекурсия
фибоначчи, факториал, быстрая сортировка, сортировка слиянием
любую рекурсию можно вызвать как итерационный алгоритм и любой итерационный алгоритм сделать рекурсией

сложение элекментов массива через рекурсию - не удивляться такому
